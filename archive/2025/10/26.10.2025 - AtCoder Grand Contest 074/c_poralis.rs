//{"name":"C - PORALIS","group":"AtCoder - AtCoder Grand Contest 074","url":"https://atcoder.jp/contests/agc074/tasks/agc074_c","interactive":false,"timeLimit":2000,"tests":[{"input":"3\n3\n8\n1\n","output":"3 14 5\n13 2 10\n6 902 909 186 684 219 471 248\n1023 249 64 0 264 768 778 794\n2025\n1026\n"}],"testType":"single","input":{"type":"stdin","fileName":null,"pattern":null},"output":{"type":"stdout","fileName":null,"pattern":null}}

use algo_lib::collections::iter_ext::iter_copied::ItersCopied;
use algo_lib::collections::slice_ext::bounds::Bounds;
use algo_lib::collections::vec_ext::sorted::Sorted;
use algo_lib::io::input::Input;
use algo_lib::io::output::Output;
use algo_lib::misc::test_type::TaskType;

use algo_lib::misc::test_type::TestType;
use algo_lib::numbers::num_traits::bit_ops::BitOps;

type PreCalc = Vec<u32>;

const ANS: [u32; 1024] = [
    0, 1, 2, 4, 5, 8, 9, 16, 17, 20, 21, 32, 33, 36, 37, 64, 65, 68, 69, 80, 81, 84, 85, 128, 129,
    132, 133, 144, 145, 148, 149, 256, 257, 260, 261, 272, 273, 276, 277, 320, 321, 324, 325, 336,
    337, 340, 341, 512, 513, 516, 517, 528, 529, 532, 533, 576, 577, 580, 581, 592, 593, 596, 597,
    1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045, 1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109,
    1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301, 1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365,
    2048, 2049, 2052, 2053, 2064, 2065, 2068, 2069, 2112, 2113, 2116, 2117, 2128, 2129, 2132, 2133,
    2304, 2305, 2308, 2309, 2320, 2321, 2324, 2325, 2368, 2369, 2372, 2373, 2384, 2385, 2388, 2389,
    4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117, 4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181,
    4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373, 4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437,
    5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141, 5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205,
    5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397, 5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461,
    8192, 8193, 8196, 8197, 8208, 8209, 8212, 8213, 8256, 8257, 8260, 8261, 8272, 8273, 8276, 8277,
    8448, 8449, 8452, 8453, 8464, 8465, 8468, 8469, 8512, 8513, 8516, 8517, 8528, 8529, 8532, 8533,
    9216, 9217, 9220, 9221, 9232, 9233, 9236, 9237, 9280, 9281, 9284, 9285, 9296, 9297, 9300, 9301,
    9472, 9473, 9476, 9477, 9488, 9489, 9492, 9493, 9536, 9537, 9540, 9541, 9552, 9553, 9556, 9557,
    16384, 16385, 16388, 16389, 16400, 16401, 16404, 16405, 16448, 16449, 16452, 16453, 16464,
    16465, 16468, 16469, 16640, 16641, 16644, 16645, 16656, 16657, 16660, 16661, 16704, 16705,
    16708, 16709, 16720, 16721, 16724, 16725, 17408, 17409, 17412, 17413, 17424, 17425, 17428,
    17429, 17472, 17473, 17476, 17477, 17488, 17489, 17492, 17493, 17664, 17665, 17668, 17669,
    17680, 17681, 17684, 17685, 17728, 17729, 17732, 17733, 17744, 17745, 17748, 17749, 20480,
    20481, 20484, 20485, 20496, 20497, 20500, 20501, 20544, 20545, 20548, 20549, 20560, 20561,
    20564, 20565, 20736, 20737, 20740, 20741, 20752, 20753, 20756, 20757, 20800, 20801, 20804,
    20805, 20816, 20817, 20820, 20821, 21504, 21505, 21508, 21509, 21520, 21521, 21524, 21525,
    21568, 21569, 21572, 21573, 21584, 21585, 21588, 21589, 21760, 21761, 21764, 21765, 21776,
    21777, 21780, 21781, 21824, 21825, 21828, 21829, 21840, 21841, 21844, 21845, 32768, 32769,
    32772, 32773, 32784, 32785, 32788, 32789, 32832, 32833, 32836, 32837, 32848, 32849, 32852,
    32853, 33024, 33025, 33028, 33029, 33040, 33041, 33044, 33045, 33088, 33089, 33092, 33093,
    33104, 33105, 33108, 33109, 33792, 33793, 33796, 33797, 33808, 33809, 33812, 33813, 33856,
    33857, 33860, 33861, 33872, 33873, 33876, 33877, 34048, 34049, 34052, 34053, 34064, 34065,
    34068, 34069, 34112, 34113, 34116, 34117, 34128, 34129, 34132, 34133, 36864, 36865, 36868,
    36869, 36880, 36881, 36884, 36885, 36928, 36929, 36932, 36933, 36944, 36945, 36948, 36949,
    37120, 37121, 37124, 37125, 37136, 37137, 37140, 37141, 37184, 37185, 37188, 37189, 37200,
    37201, 37204, 37205, 37888, 37889, 37892, 37893, 37904, 37905, 37908, 37909, 37952, 37953,
    37956, 37957, 37968, 37969, 37972, 37973, 38144, 38145, 38148, 38149, 38160, 38161, 38164,
    38165, 38208, 38209, 38212, 38213, 38224, 38225, 38228, 38229, 65536, 65537, 65540, 65541,
    65552, 65553, 65556, 65557, 65600, 65601, 65604, 65605, 65616, 65617, 65620, 65621, 65792,
    65793, 65796, 65797, 65808, 65809, 65812, 65813, 65856, 65857, 65860, 65861, 65872, 65873,
    65876, 65877, 66560, 66561, 66564, 66565, 66576, 66577, 66580, 66581, 66624, 66625, 66628,
    66629, 66640, 66641, 66644, 66645, 66816, 66817, 66820, 66821, 66832, 66833, 66836, 66837,
    66880, 66881, 66884, 66885, 66896, 66897, 66900, 66901, 69632, 69633, 69636, 69637, 69648,
    69649, 69652, 69653, 69696, 69697, 69700, 69701, 69712, 69713, 69716, 69717, 69888, 69889,
    69892, 69893, 69904, 69905, 69908, 69909, 69952, 69953, 69956, 69957, 69968, 69969, 69972,
    69973, 70656, 70657, 70660, 70661, 70672, 70673, 70676, 70677, 70720, 70721, 70724, 70725,
    70736, 70737, 70740, 70741, 70912, 70913, 70916, 70917, 70928, 70929, 70932, 70933, 70976,
    70977, 70980, 70981, 70992, 70993, 70996, 70997, 81920, 81921, 81924, 81925, 81936, 81937,
    81940, 81941, 81984, 81985, 81988, 81989, 82000, 82001, 82004, 82005, 82176, 82177, 82180,
    82181, 82192, 82193, 82196, 82197, 82240, 82241, 82244, 82245, 82256, 82257, 82260, 82261,
    82944, 82945, 82948, 82949, 82960, 82961, 82964, 82965, 83008, 83009, 83012, 83013, 83024,
    83025, 83028, 83029, 83200, 83201, 83204, 83205, 83216, 83217, 83220, 83221, 83264, 83265,
    83268, 83269, 83280, 83281, 83284, 83285, 86016, 86017, 86020, 86021, 86032, 86033, 86036,
    86037, 86080, 86081, 86084, 86085, 86096, 86097, 86100, 86101, 86272, 86273, 86276, 86277,
    86288, 86289, 86292, 86293, 86336, 86337, 86340, 86341, 86352, 86353, 86356, 86357, 87040,
    87041, 87044, 87045, 87056, 87057, 87060, 87061, 87104, 87105, 87108, 87109, 87120, 87121,
    87124, 87125, 87296, 87297, 87300, 87301, 87312, 87313, 87316, 87317, 87360, 87361, 87364,
    87365, 87376, 87377, 87380, 87381, 131072, 131073, 131076, 131077, 131088, 131089, 131092,
    131093, 131136, 131137, 131140, 131141, 131152, 131153, 131156, 131157, 131328, 131329, 131332,
    131333, 131344, 131345, 131348, 131349, 131392, 131393, 131396, 131397, 131408, 131409, 131412,
    131413, 132096, 132097, 132100, 132101, 132112, 132113, 132116, 132117, 132160, 132161, 132164,
    132165, 132176, 132177, 132180, 132181, 132352, 132353, 132356, 132357, 132368, 132369, 132372,
    132373, 132416, 132417, 132420, 132421, 132432, 132433, 132436, 132437, 135168, 135169, 135172,
    135173, 135184, 135185, 135188, 135189, 135232, 135233, 135236, 135237, 135248, 135249, 135252,
    135253, 135424, 135425, 135428, 135429, 135440, 135441, 135444, 135445, 135488, 135489, 135492,
    135493, 135504, 135505, 135508, 135509, 136192, 136193, 136196, 136197, 136208, 136209, 136212,
    136213, 136256, 136257, 136260, 136261, 136272, 136273, 136276, 136277, 136448, 136449, 136452,
    136453, 136464, 136465, 136468, 136469, 136512, 136513, 136516, 136517, 136528, 136529, 136532,
    136533, 147456, 147457, 147460, 147461, 147472, 147473, 147476, 147477, 147520, 147521, 147524,
    147525, 147536, 147537, 147540, 147541, 147712, 147713, 147716, 147717, 147728, 147729, 147732,
    147733, 147776, 147777, 147780, 147781, 147792, 147793, 147796, 147797, 148480, 148481, 148484,
    148485, 148496, 148497, 148500, 148501, 148544, 148545, 148548, 148549, 148560, 148561, 148564,
    148565, 148736, 148737, 148740, 148741, 148752, 148753, 148756, 148757, 148800, 148801, 148804,
    148805, 148816, 148817, 148820, 148821, 151552, 151553, 151556, 151557, 151568, 151569, 151572,
    151573, 151616, 151617, 151620, 151621, 151632, 151633, 151636, 151637, 151808, 151809, 151812,
    151813, 151824, 151825, 151828, 151829, 151872, 151873, 151876, 151877, 151888, 151889, 151892,
    151893, 152576, 152577, 152580, 152581, 152592, 152593, 152596, 152597, 152640, 152641, 152644,
    152645, 152656, 152657, 152660, 152661, 152832, 152833, 152836, 152837, 152848, 152849, 152852,
    152853, 152896, 152897, 152900, 152901, 152912, 152913, 152916, 152917, 262144,
];

const A: [u32; 1024] = [
    0, 1, 3, 7, 5, 15, 13, 31, 29, 23, 21, 63, 61, 55, 53, 127, 125, 119, 117, 95, 93, 87, 85, 255,
    253, 247, 245, 223, 221, 215, 213, 511, 509, 503, 501, 479, 477, 471, 469, 383, 381, 375, 373,
    351, 349, 343, 341, 1023, 1021, 1015, 1013, 991, 989, 983, 981, 895, 893, 887, 885, 863, 861,
    855, 853, 2047, 2045, 2039, 2037, 2015, 2013, 2007, 2005, 1919, 1917, 1911, 1909, 1887, 1885,
    1879, 1877, 1535, 1533, 1527, 1525, 1503, 1501, 1495, 1493, 1407, 1405, 1399, 1397, 1375, 1373,
    1367, 1365, 4095, 4093, 4087, 4085, 4063, 4061, 4055, 4053, 3967, 3965, 3959, 3957, 3935, 3933,
    3927, 3925, 3583, 3581, 3575, 3573, 3551, 3549, 3543, 3541, 3455, 3453, 3447, 3445, 3423, 3421,
    3415, 3413, 8191, 8189, 8183, 8181, 8159, 8157, 8151, 8149, 8063, 8061, 8055, 8053, 8031, 8029,
    8023, 8021, 7679, 7677, 7671, 7669, 7647, 7645, 7639, 7637, 7551, 7549, 7543, 7541, 7519, 7517,
    7511, 7509, 6143, 6141, 6135, 6133, 6111, 6109, 6103, 6101, 6015, 6013, 6007, 6005, 5983, 5981,
    5975, 5973, 5631, 5629, 5623, 5621, 5599, 5597, 5591, 5589, 5503, 5501, 5495, 5493, 5471, 5469,
    5463, 5461, 16383, 16381, 16375, 16373, 16351, 16349, 16343, 16341, 16255, 16253, 16247, 16245,
    16223, 16221, 16215, 16213, 15871, 15869, 15863, 15861, 15839, 15837, 15831, 15829, 15743,
    15741, 15735, 15733, 15711, 15709, 15703, 15701, 14335, 14333, 14327, 14325, 14303, 14301,
    14295, 14293, 14207, 14205, 14199, 14197, 14175, 14173, 14167, 14165, 13823, 13821, 13815,
    13813, 13791, 13789, 13783, 13781, 13695, 13693, 13687, 13685, 13663, 13661, 13655, 13653,
    32767, 32765, 32759, 32757, 32735, 32733, 32727, 32725, 32639, 32637, 32631, 32629, 32607,
    32605, 32599, 32597, 32255, 32253, 32247, 32245, 32223, 32221, 32215, 32213, 32127, 32125,
    32119, 32117, 32095, 32093, 32087, 32085, 30719, 30717, 30711, 30709, 30687, 30685, 30679,
    30677, 30591, 30589, 30583, 30581, 30559, 30557, 30551, 30549, 30207, 30205, 30199, 30197,
    30175, 30173, 30167, 30165, 30079, 30077, 30071, 30069, 30047, 30045, 30039, 30037, 24575,
    24573, 24567, 24565, 24543, 24541, 24535, 24533, 24447, 24445, 24439, 24437, 24415, 24413,
    24407, 24405, 24063, 24061, 24055, 24053, 24031, 24029, 24023, 24021, 23935, 23933, 23927,
    23925, 23903, 23901, 23895, 23893, 22527, 22525, 22519, 22517, 22495, 22493, 22487, 22485,
    22399, 22397, 22391, 22389, 22367, 22365, 22359, 22357, 22015, 22013, 22007, 22005, 21983,
    21981, 21975, 21973, 21887, 21885, 21879, 21877, 21855, 21853, 21847, 21845, 65535, 65533,
    65527, 65525, 65503, 65501, 65495, 65493, 65407, 65405, 65399, 65397, 65375, 65373, 65367,
    65365, 65023, 65021, 65015, 65013, 64991, 64989, 64983, 64981, 64895, 64893, 64887, 64885,
    64863, 64861, 64855, 64853, 63487, 63485, 63479, 63477, 63455, 63453, 63447, 63445, 63359,
    63357, 63351, 63349, 63327, 63325, 63319, 63317, 62975, 62973, 62967, 62965, 62943, 62941,
    62935, 62933, 62847, 62845, 62839, 62837, 62815, 62813, 62807, 62805, 57343, 57341, 57335,
    57333, 57311, 57309, 57303, 57301, 57215, 57213, 57207, 57205, 57183, 57181, 57175, 57173,
    56831, 56829, 56823, 56821, 56799, 56797, 56791, 56789, 56703, 56701, 56695, 56693, 56671,
    56669, 56663, 56661, 55295, 55293, 55287, 55285, 55263, 55261, 55255, 55253, 55167, 55165,
    55159, 55157, 55135, 55133, 55127, 55125, 54783, 54781, 54775, 54773, 54751, 54749, 54743,
    54741, 54655, 54653, 54647, 54645, 54623, 54621, 54615, 54613, 131071, 131069, 131063, 131061,
    131039, 131037, 131031, 131029, 130943, 130941, 130935, 130933, 130911, 130909, 130903, 130901,
    130559, 130557, 130551, 130549, 130527, 130525, 130519, 130517, 130431, 130429, 130423, 130421,
    130399, 130397, 130391, 130389, 129023, 129021, 129015, 129013, 128991, 128989, 128983, 128981,
    128895, 128893, 128887, 128885, 128863, 128861, 128855, 128853, 128511, 128509, 128503, 128501,
    128479, 128477, 128471, 128469, 128383, 128381, 128375, 128373, 128351, 128349, 128343, 128341,
    122879, 122877, 122871, 122869, 122847, 122845, 122839, 122837, 122751, 122749, 122743, 122741,
    122719, 122717, 122711, 122709, 122367, 122365, 122359, 122357, 122335, 122333, 122327, 122325,
    122239, 122237, 122231, 122229, 122207, 122205, 122199, 122197, 120831, 120829, 120823, 120821,
    120799, 120797, 120791, 120789, 120703, 120701, 120695, 120693, 120671, 120669, 120663, 120661,
    120319, 120317, 120311, 120309, 120287, 120285, 120279, 120277, 120191, 120189, 120183, 120181,
    120159, 120157, 120151, 120149, 98303, 98301, 98295, 98293, 98271, 98269, 98263, 98261, 98175,
    98173, 98167, 98165, 98143, 98141, 98135, 98133, 97791, 97789, 97783, 97781, 97759, 97757,
    97751, 97749, 97663, 97661, 97655, 97653, 97631, 97629, 97623, 97621, 96255, 96253, 96247,
    96245, 96223, 96221, 96215, 96213, 96127, 96125, 96119, 96117, 96095, 96093, 96087, 96085,
    95743, 95741, 95735, 95733, 95711, 95709, 95703, 95701, 95615, 95613, 95607, 95605, 95583,
    95581, 95575, 95573, 90111, 90109, 90103, 90101, 90079, 90077, 90071, 90069, 89983, 89981,
    89975, 89973, 89951, 89949, 89943, 89941, 89599, 89597, 89591, 89589, 89567, 89565, 89559,
    89557, 89471, 89469, 89463, 89461, 89439, 89437, 89431, 89429, 88063, 88061, 88055, 88053,
    88031, 88029, 88023, 88021, 87935, 87933, 87927, 87925, 87903, 87901, 87895, 87893, 87551,
    87549, 87543, 87541, 87519, 87517, 87511, 87509, 87423, 87421, 87415, 87413, 87391, 87389,
    87383, 87381, 262143, 262141, 262135, 262133, 262111, 262109, 262103, 262101, 262015, 262013,
    262007, 262005, 261983, 261981, 261975, 261973, 261631, 261629, 261623, 261621, 261599, 261597,
    261591, 261589, 261503, 261501, 261495, 261493, 261471, 261469, 261463, 261461, 260095, 260093,
    260087, 260085, 260063, 260061, 260055, 260053, 259967, 259965, 259959, 259957, 259935, 259933,
    259927, 259925, 259583, 259581, 259575, 259573, 259551, 259549, 259543, 259541, 259455, 259453,
    259447, 259445, 259423, 259421, 259415, 259413, 253951, 253949, 253943, 253941, 253919, 253917,
    253911, 253909, 253823, 253821, 253815, 253813, 253791, 253789, 253783, 253781, 253439, 253437,
    253431, 253429, 253407, 253405, 253399, 253397, 253311, 253309, 253303, 253301, 253279, 253277,
    253271, 253269, 251903, 251901, 251895, 251893, 251871, 251869, 251863, 251861, 251775, 251773,
    251767, 251765, 251743, 251741, 251735, 251733, 251391, 251389, 251383, 251381, 251359, 251357,
    251351, 251349, 251263, 251261, 251255, 251253, 251231, 251229, 251223, 251221, 229375, 229373,
    229367, 229365, 229343, 229341, 229335, 229333, 229247, 229245, 229239, 229237, 229215, 229213,
    229207, 229205, 228863, 228861, 228855, 228853, 228831, 228829, 228823, 228821, 228735, 228733,
    228727, 228725, 228703, 228701, 228695, 228693, 227327, 227325, 227319, 227317, 227295, 227293,
    227287, 227285, 227199, 227197, 227191, 227189, 227167, 227165, 227159, 227157, 226815, 226813,
    226807, 226805, 226783, 226781, 226775, 226773, 226687, 226685, 226679, 226677, 226655, 226653,
    226647, 226645, 221183, 221181, 221175, 221173, 221151, 221149, 221143, 221141, 221055, 221053,
    221047, 221045, 221023, 221021, 221015, 221013, 220671, 220669, 220663, 220661, 220639, 220637,
    220631, 220629, 220543, 220541, 220535, 220533, 220511, 220509, 220503, 220501, 219135, 219133,
    219127, 219125, 219103, 219101, 219095, 219093, 219007, 219005, 218999, 218997, 218975, 218973,
    218967, 218965, 218623, 218621, 218615, 218613, 218591, 218589, 218583, 218581, 218495, 218493,
    218487, 218485, 218463, 218461, 218455, 218453, 524287,
];

fn solve(input: &mut Input, out: &mut Output, _test_case: usize, data: &mut PreCalc) {
    let n = input.read_size();

    if n == 1 {
        out.print_line(0);
        out.print_line(0);
        return;
    }

    let p = ANS[..n].to_vec();
    let mut a = A[..n].to_vec().sorted();
    for i in 0..n {
        a[i] ^= u32::all_bits(30);
    }
    // let mut a = vec![0; n];
    // let hb = 1 << p[n - 1].highest_bit();
    // let mut found = FxHashSet::default();
    // let mut r = Random::new_with_seed(239);
    // loop {
    //     let i = r.gen_range(0..2 * hb);
    //     let mut v = Vec::new();
    //     for j in p.copy_iter() {
    //         let x = j & i;
    //         let pos = v.lower_bound(&x);
    //         if pos == v.len() {
    //             v.push(x);
    //         } else {
    //             v[pos] = x;
    //         }
    //     }
    //     if found.insert(v.len()) {
    //         a[v.len() - 1] = u32::all_bits(30) - i;
    //         if found.len() == n {
    //             break;
    //         }
    //     }
    // }
    out.print_line(p);
    out.print_line(a);
}

pub static TEST_TYPE: TestType = TestType::MultiNumber;
pub static TASK_TYPE: TaskType = TaskType::Classic;

pub(crate) fn run(mut input: Input, mut output: Output) -> bool {
    let mut p = vec![0];
    let mut check = vec![0];
    let mut sp_checks = vec![0];
    /*for i in 1..1024 {
        //ANS.len() {
        if i % 50 == 0 {
            eprintln!("{}", i);
        }
        let i = ANS[i];
        let hb = 1 << i.highest_bit();
        let mut map = vec![Vec::new(); p.len() + 1];
        p.push(i);
        for jj in check.copy_iter() {
            for j in [jj, jj ^ hb] {
                // let mut cur = Vec::new();
                // for x in p.copy_iter() {
                //     cur.push(x & j);
                // }
                // cur.push(i & j);
                let mut v = Vec::new();
                for x in p.copy_iter() {
                    let x = x & j;
                    let pos = v.lower_bound(&x);
                    if pos == v.len() {
                        v.push(x);
                    } else {
                        v[pos] = x;
                    }
                }
                map[v.len() - 1].push(j);
            }
        }
        let was_check = check.copy_iter().collect::<FxHashSet<_>>();
        check.clear();
        let mut added = 0;
        for mut v in map {
            v.sort();
            let x = v.copy_min();
            if !was_check.contains(&x) {
                added = x;
            }
            check.push(x);
        }
        // eprintln!("{:?}", check);
        // sp_checks.push(check.clone());
        sp_checks.push(added);
    }*/

    let mut pre_calc = sp_checks;

    // eprintln!("{:?}", pre_calc);

    match TEST_TYPE {
        TestType::Single => solve(&mut input, &mut output, 1, &mut pre_calc),
        TestType::MultiNumber => {
            let t = input.read();
            for i in 1..=t {
                solve(&mut input, &mut output, i, &mut pre_calc);
            }
        }
        TestType::MultiEof => {
            let mut i = 1;
            while input.peek().is_some() {
                solve(&mut input, &mut output, i, &mut pre_calc);
                i += 1;
            }
        }
    }
    output.flush();
    match TASK_TYPE {
        TaskType::Classic => input.is_empty(),
        TaskType::Interactive => true,
    }
}

#[cfg(feature = "local")]
mod tester;

#[cfg(feature = "local")]
fn main() {
    tester::run_tests();
}

#[cfg(not(feature = "local"))]
fn main() {
    let input = algo_lib::io::input::Input::stdin();
    let output = algo_lib::io::output::Output::stdout();
    run(input, output);
}
